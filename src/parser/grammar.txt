This is the syntax of the Nougaro language. This file is not actually parsed by Nougaro, but is rather a way to explain the syntax.

statements    : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement     : KEYWORD:RETURN expr?
              : KEYWORD:IMPORT IDENTIFIER (DOT IDENTIFIER)?* (KEYWORD:AS IDENTIFIER)?
              : KEYWORD:EXPORT expr AS IDENTIFIER
              : KEYWORD:EXPORT IDENTIFIER (KEYWORD:AS IDENTIFIER)?
              : KEYWORD:CONTINUE (COLON IDENTIFIER)?
              : KEYWORD:BREAK (COLON IDENTIFIER)? (KEYWORD:AND KEYWORD:RETURN expr)?
              : expr

expr          : var_assign
              : KEYWORD:DEL IDENTIFIER
              : KEYWORD:WRITE expr (TO|TO_AND_OVERWRITE) expr INT?
              : KEYWORD:READ expr (TO IDENTIFIER)? INT?
              : KEYWORD:ASSERT expr (COMMA expr)?
              : comp_expr ((KEYWORD:AND|KEYWORD:OR|KEYWORD:XOR|BITWISEAND|BITWISEOR|BITWISEXOR) comp_expr)*

var_assign    : KEYWORD:VAR assign_id (COMMA assign_id)?* assign_eq assign_expr
              : KEYWORD:VAR assign_id (INCREMENT|DECREMENT)

assign_id     : (IDENTIFIER (LPAREN (MUL? expr (COMMA MUL? expr)?*)? RPAREN)?* DOT)?* IDENTIFIER

assign_eq     : EQ|PLUSEQ|MINUSEQ|MULTEQ|DIVEQ|POWEQ|FLOORDIVEQ|PERCEQ|OREQ|ANDEQ|XOREQ|BITWISEANDEQ|BITWISEOREQ|BITWISEXOREQ|EEEQ|GTEQ|GTEEQ|LTEQ|LTEEQ

assign_expr   : expr (COMMA expr)?*

comp_expr     : (KEYWORD:NOT|BITWISENOT) comp_expr
              : arith_expr ((EE|LT|GT|LTE|GTE|KEYWORD:IN) arith_expr)*

arith_expr    : term ((PLUS|MINUS) term)*

term          : factor ((MUL|DIV|PERC|FLOORDIV) factor)*

factor        : (PLUS|MINUS) factor
              : LEGACYABS factor LEGACYABS
              : power

power         : call (DOT call)?* (POW factor)*

call          : atom (LPAREN (MUL? expr (COMMA MUL? expr)?*)? RPAREN)?*

atom          : (INT|FLOAT)(E_INFIX INT)?
              : STRING (STRING NEWLINE?*)?*
              : IDENTIFIER (INTERROGATIVE_PNT IDENTIFIER|expr)?*
              : LPAREN expr RPAREN
              : DOLLAR IDENTIFIER
              : list_expr
              : if_expr
              : for_expr
              : while_expr
              : do_expr
              : func_def
              : class_def

list_expr     : LSQUARE (MUL? expr (COMMA MUL? expr)?*)? RSQUARE

if_expr       : KEYWORD:IF expr KEYWORD:THEN
                ((statement if_expr_b|if_expr_c?)
              | (NEWLINE statements KEYWORD:END|if_expr_b|if_expr_c))

if_expr_b     : KEYWORD:ELIF expr KEYWORD:THEN
                ((statement if_expr_b|if_expr_c?)
              | (NEWLINE statements KEYWORD:END|if_expr_b|if_expr_c))

if_expr_c     : KEYWORD:ELSE
                (statement
              | (NEWLINE statements KEYWORD:END))

for_expr      : KEYWORD:FOR (COLON IDENTIFIER)?
                IDENTIFIER EQ expr KEYWORD:TO expr (KEYWORD:STEP expr)? KEYWORD:THEN
                statement | (NEWLINE statements KEYWORD:END)
              : KEYWORD:FOR (COLON IDENTIFIER)?
                IDENTIFIER KEYWORD:IN expr KEYWORD:THEN
                statement | (NEWLINE statements KEYWORD:END)

while_expr    : KEYWORD:WHILE (COLON IDENTIFIER)?
                expr KEYWORD:THEN
                statement | (NEWLINE statements KEYWORD:END)

do_expr       : KEYWORD:DO (COLON IDENTIFIER)?
                (statement | (NEWLINE statements)) KEYWORD:THEN KEYWORD:LOOP KEYWORD:WHILE expr

func_def      : KEYWORD:DEF IDENTIFIER? fund_def_args
                (ARROW expr)|(NEWLINE statements KEYWORD:END)

fund_def_args : LPAREN (IDENTIFIER (COMMA IDENTIFIER)*?)? RPAREN
              | LPAREN ((IDENTIFIER EQ expr) (COMMA IDENTIFIER EQ expr)*?)? RPAREN
              | LPAREN (IDENTIFIER (COMMA IDENTIFIER)*? (COMMA IDENTIFIER EQ expr)*?)? RPAREN

class_def     : KEYWORD:CLASS IDENTIFIER?
                (LPAREN IDENTIFIER? RPAREN)?
                (ARROW expr)
              | (NEWLINE statements KEYWORD:END)
