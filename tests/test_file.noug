/* Nougaro : a python-interpreted high-level programming language
   Copyright (C) 2021-2024  Jean Dubois (https://github.com/jd-develop) <jd-dev@laposte.net>

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>. */
import time
import _conffiles as cf


def test_nougaro(print_OK)
    var start_time = time.time()
    
    assert __noug_version__ == "0.18.0-beta"
    import noug_version
    assert noug_version.version_list == [0, 18, 0, "beta", 0]

    print("Config directory is " + cf.CONFIG_DIRECTORY + ".")

    print("Hello Toulouse!")  # the entire world is actually Toulouse, trust me. If you say 'pain au chocolat', you're not in the world.
    # comment
    /* single-line multi-line comment */
    /* real
    multi-line
         comment
         */
    /* multiline
     * comment
     *  /* nested
     *   * pretty cool
     *   */
     *  # comment
     */

    assert $ == "$"
    assert $test == "$test"
    var a = 1
    assert $a == 1
    assert b?a == 1
    assert b?c?2 == 2
    assert b?c?d?a?e?4 == 1

    if print_OK then /* comment */ assert $print("OK print & comments") == None /* comment */ # comment

    # basic syntax
    "a" ; "b"

    if print_OK then print("OK basic syntax")

    # operators
    assert 1 ^ 2 == 1
    assert 1 * 2 == 2
    assert 1 % 2 == 1
    assert 1 / 2 == 0.5
    assert 1 // 2 == 0
    assert 1 + 2 == 3
    assert 1 - 2 == -1
    assert (1 & 2) == 0
    assert (1 | 2) == 3
    assert (3 ^^ 2) == 1
    assert 1e3 == 1000
    assert 1e-3 == 0.001
    assert 1.1e1 == 11
    # assert 1.1e-1 == 0.11  # it crashes because 1.1e-1 = 0.11000000000000001...

    if print_OK then print("OK ops")

    # variables
    ## definition
    var hello = "Hello Toulouse!"
    assert (var a = 1) == 1
    assert (var b = var c = 2) == 2

    assert (1 + (var a = 2)) == 3

    if print_OK then print("OK var def")

    ## edit
    assert (var a = 1) == 1
    assert (var a += 1) == 2
    assert (var a -= 1) == 1
    assert (var a *= 1) == 1
    assert (var a /= 1) == 1
    assert (var a ^= 1) == 1
    assert (var a //= 1) == 1
    assert (var a %= 1) == 0
    assert (var a ||= 1) == 1
    assert (var a &&= 1) == 1
    assert (var a ^^^= 1) == 0
    assert (var a |= 1) == 1
    assert (var a &= 1) == 1
    assert (var a ^^= 1) == 0
    assert (var a === 1) == 0
    assert (var a <== 1) == 1
    assert (var a <<= 1) == 0
    assert (var a >== 1) == 0
    assert (var a >>= 1) == 0
    var a++
    assert a == 1
    var a--
    assert a == 0
    var b = 9
    var a, b ++
    assert b == 10 and a == 1
    var a, b --
    assert b == 9 and a == 0

    if print_OK then print("OK var edit")

    ## access
    assert a==0

    if print_OK then print("OK var acc")

    ## deletion
    del a

    if print_OK then print("OK var del")

    # strings
    assert "a" == 'a' == ¬´a¬ª
    'b'
    "a\""
    'b\''
    "a\nb"
    "a\tb"
    "a\\b"
    assert ¬´a¬´\¬ª"'¬ª == "a¬´¬ª\"'" == 'a¬´¬ª"\''
    assert "\xD9" == chr(0xD9) == "\N{Latin capital letter u with grave}" == "√ô"
    assert "\u0D9e" == chr(0xD9E) == "\N{sinhala LETTER Kantaja nAAsIkyaya}" == "‡∂û"
    assert "\xBb\u09Df" == chr(0xbB) + chr(0x9dF) == "¬ª‡ßü"
    assert "\U0001f937" == "ü§∑" == "\N{shrug}"
    assert "a""b" == "ab"
    assert "a"
           "b" == "ab"

    if print_OK then print("OK str")

    ## operations
    assert ("a" + "b") == 'ab'
    assert "a" * 3 == "aaa"

    if print_OK then print("OK str ops")

    ## tests
    assert True==1
    assert False==0
    assert null==0
    assert False!=True
    assert "a" in "this is an example string"
    assert 1 in "123"
    assert "b√©po" in ["azerty", "qwerty", "b√©po"]
    assert 1 > 0
    assert 1 >= 1
    assert 0 < 1
    assert 1 <= 1
    assert True
    assert True and True
    assert True or False
    assert False or True
    assert not (False and True)
    assert False xor True
    assert not (True xor True)
    assert not False
    assert True or 1/0
    import debug
    assert not 10 == debug and 10 != debug and not debug == 10 and debug != 10
    assert not (False and 1/0)
    assert True or 1/0
    var a = 1
    assert (is_int(a) and round(a)) == True
    var a = "str"
    assert not (is_int(a) and round(a))
    del a

    if print_OK then print("OK tests")

    assert (if 2 == 2 then "yes" else "no") == "yes"
    assert (if 2 == 3 then "yes" else "no") == "no"
    assert (if 2 == 3 then "yes" elif True then "elif" else "no") == "elif"
    assert (if 2 == 3 then "yes" elif False then "elif" else "no") == "no"
    assert (if 2 == 2 then "yes" elif False then "elif" else "no") == "yes"

    if print_OK then print("OK if")

    # loops
    assert (for i = 1 to 10 then i) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
    assert (for i in [1, 2, 3, 4, 5, 6, 7, 8, 9] then if i%2 == 0 then i else continue) == [None, 2, None, 4, None, 6, None, 8, None]
    assert (for i = -1 to -10 step -1 then i%2) == [1, 0, 1, 0, 1, 0, 1, 0, 1]
    for c in "abc" then assert c in "abc"
    var b = 1
    assert (while b<10 then; var b+=1; end) == [[2], [3], [4], [5], [6], [7], [8], [9], [10]]
    assert b == 10

    assert (for i = (var forloop = 1) to 20 step 3 then i) == (for j = 1 to 20 step 3 then j)
    assert (for i = (var forloop += 1) to 20 step 3 then i) == (for j = 2 to 20 step 3 then j)

    var b = 1
    assert (do var b += 1 then loop while b < 10) == [2, 3, 4, 5, 6, 7, 8, 9, 10]
    assert b == 10
    assert (do var b += 1 then loop while b < 10) == [11]
    assert b == 11

    del b

    if print_OK then print("OK loops")

    # functions
    ## definition
    def func()
        void()
        ## return
        return "str"
    end

    def this_is_a_function(x); if x then; return; elif x == None then; return 3; else; return; end; end

    if print_OK then print("OK func")

    ## call
    assert (def()->"str")() == func()
    assert this_is_a_function(12) == None
    assert this_is_a_function(False) == None
    assert this_is_a_function(None) == 3

    if print_OK then print("OK call")

    # classes
    var a = (class Test; var b5 = (class; var c = 2; end)(); end)()
    assert a.b5.c == 2

    var c = 12
    class Test2
        void()
        var test = 1
        var d = 6

        def method()
            void()
            assert this.test == 1
            var c = c
            var this.test, c += 1, 1
            assert this.test == 2
            assert c == 13
            var this.test, c = c, this.test
            assert this.test == 13
            assert c == 2
        end

        def method2()
            print(this.test)
            print(this)
            assert this.test == 13
        end
    end

    var d = Test2()
    d.method()
    d.method2()
    assert c == 12
    assert type(d.method) == "method"

    class Test3(Test2)
        var b = 4

        def method()
            return this.test
        end

        def foo()
            return this.method() + 6
        end
    end
    assert Test3().foo() == 7

    class Test4(Test3)
        def bar()
            assert this.d == 6
            assert this.b == 4
            assert this.foo() == 7
            var this.test = this.foo()
            var this.test += 6
            this.method2()
            return this.test - 13
        end
    end
    assert Test4().bar() == 0

    def e(a)
        return a
    end

    var variable = Test4()
    var variable.test = 20
    # var e(variable).test = 20  # fixme: there is a .copy() somewhere I think
    assert variable.test == 20

    # builtin funcs
    print("Please test these builtin functions after the execution of the test:")
    print("* input")
    print("* input_int")
    print("* input_num")
    print("* __gpl__")
    print("* exit")
    print("* clear")
    print("* run")
    print("* example")
    print("* __test__")

    assert print(hello) == None
    assert print(1) == None
    assert print(123.456) == None
    assert print_ret(1) == "1"
    assert print_ret(123.456) == "123.456"
    assert print_ret(hello) == hello

    if print_OK then print("OK builtin funcs 1")

    assert type("a") == "str"
    assert type(123) == "int"
    assert type(3.14) == "float"
    assert type([1, 2, 3]) == "list"
    assert type(def()->null) == "func"
    assert type(type) == "built-in func"
    assert "List" in __py_type__([])
    # type(method) is tested in classes

    if print_OK then print("OK builtin funcs 2")

    assert is_int(123)
    assert is_float(3.14)
    assert is_num(123)
    assert is_num(3.14)
    assert is_str("abc")
    assert is_list([1, 2, 3])
    assert is_func(is_func)
    assert is_func(def()->null)

    assert is_int(debug.is_debug_enabled)
    assert is_num(debug.is_debug_enabled)
    assert is_int(debug.should_print_context)
    assert is_num(debug.should_print_context)

    assert is_func(debug.enable_all)
    assert is_func(debug.disable_all)
    assert is_func(debug.debug_mode_enable)
    assert is_func(debug.enable)
    assert is_func(debug.debug_mode_disable)
    assert is_func(debug.disable)
    assert is_func(debug.print_context)
    assert is_func(debug.stop_print_context)

    assert is_func(def()->null)
    assert is_none(None)

    if print_OK then print("OK builtin funcs 3")

    assert str(123) == "123"
    assert int("123") == 123
    assert float("3.14") == 3.14
    assert list("abc") == ["a", "b", "c"]

    if print_OK then print("OK builtin funcs 4")

    assert upper("aZeRtY") == "AZERTY"
    assert lower("aZeRtY") == "azerty"
    assert split("lorem ipsum dolor sit amet") == ["lorem", "ipsum", "dolor", "sit", "amet"]
    assert split("lorem ipsum dolor sit amet", 'o') == ["l", "rem ipsum d", "l", "r sit amet"]
    assert split("lorem ipsum, dolor sit amet", ',') == ["lorem ipsum", " dolor sit amet"]
    assert len("lorem ipsum dolor sit amet") == 26
    assert startswith("b√©po", "b√©")
    assert not startswith("b√©po", "po")
    assert endswith("b√©po", "po")
    assert not endswith("b√©po", "b√©")

    if print_OK then print("OK builtin funcs 5")

    assert ord('a') == 0x61
    assert chr(0x61) == 'a'
    assert chr(0x48) + chr(0b1100101) + 2*chr(0o154) + chr(111) + chr(32) + chr(84) + chr(111) + chr(117) + chr(108) + \
      chr(111) + chr(117) + chr(115) + chr(101) + chr(33) == hello

    if print_OK then print("OK builtin funcs 6")

    assert append(["lorem", "ipsum"], "dolor") == ["lorem", "ipsum", "dolor"]
    assert pop(["lorem", "ipsum", "dolor", "sit", "amet"]) == "amet"
    assert pop(["lorem", "ipsum", "dolor", "sit", "amet"], -1) == "amet"
    assert pop(["lorem", "ipsum", "dolor", "sit", "amet"], 0) == "lorem"
    assert insert(["lorem", "ipsum"], "dolor") == append(["lorem", "ipsum"], "dolor")
    assert insert(["lorem", "ipsum", "sit", "amet"], "dolor", 2) == ["lorem", "ipsum", "dolor", "sit", "amet"]
    assert replace(["lorem", "ipsum", "azerty", "sit", "amet"], 2, "dolor") == ["lorem", "ipsum", "dolor", "sit", "amet"]

    if print_OK then print("OK builtin funcs 7")

    assert extend(["lorem", "ipsum"], ["dolor", "sit", "amet"]) == ["lorem", "ipsum", "dolor", "sit", "amet"]
    assert extend(["lorem", "ipsum", "dolor"], ["dolor", "sit", "amet"], True) == ["lorem", "ipsum", "dolor", "sit", "amet"]
    assert get(["lorem", "ipsum"], 1) == "ipsum"
    assert max([12, 6, 4, 45, 7]) == 45
    assert max(["lorem", 12, 6, "ipsum", 4, 45, "dolor", 7], True) == 45
    assert min([12, 6, 4, 45, 7]) == 4
    assert min(["lorem", 12, 6, "ipsum", 4, 45, "dolor", 7], True) == 4
    assert len(split("lorem ipsum dolor sit amet")) == 5

    if print_OK then print("OK builtin funcs 8")

    assert round(12) == 12
    assert round(12.4) == 12
    assert round(3.14159265358979323846264338327950288419, 5) == 3.14159

    if print_OK then print("OK builtin funcs 9")

    assert void() == None
    assert __is_keyword__("assert")
    assert not __is_keyword__("print")  # we're not in Python 2 x)
    assert __is_valid_token_type__("PLUS")  # the + token
    assert not __is_valid_token_type__("LOREM_IPSUM")
    assert __python__("(5+42j).real") == 5
    assert __python__("(5+42j).imag") == 42

    if print_OK then print("OK builtin funcs 10")

    assert __how_many_lines_of_code__(False) != 0
    assert __how_many_lines_of_code__(False) > 10000  # yes I know, I write a lot of code ;)

    if print_OK then print("OK builtin funcs 11")

    ## sorting algorithms
    assert sort(list("bepo")) == list("beop")
    assert sort([1, 2, 3, 4, 3, 2, 1, 5, 2, 6, 1, 2, 4, 3, 7]) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 7]
    assert sort([]) == []
    assert sort([0, -1]) == [-1, 0]
    assert sort([1, 2, 3, 4, 3, 2, 1, 5, 2, 6, 1, 2, 4, 3, 7], "stalin") == [1, 2, 3, 4, 5, 6, 7]
    assert sort([1, 2, 3, 4, 3, 2, 1, 5, 0, 6, -400, 2, 4, 3, 7], "stalin") == [1, 2, 3, 4, 5, 6, 7]
    assert sort([], "stalin") == []
    assert sort([-1, 0, -3], "stalin") == [-1, 0]
    assert reverse(sort([3, 1, 5, 6, 12, -4, 0, 9999999, 45])) == [9999999, 45, 12, 6, 5, 3, 1, 0, -4]
    assert reverse("b√©po") == "op√©b" != "azerty"
    print("Executing sleep sort, this should take 4 seconds...")
    assert sort([1, 2, 3, 4, 3, 2, 1, 0, 4, 2, 4, 1, 2, 4, 3], "sleep-verbose") == [0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4]
    assert sort([0], "sleep") == [0]
    assert sort([], "sleep") == []
    assert sort([], "miracle") == []
    assert sort([1], "miracle") == [1]
    assert sort([-1, 1, 2, 3, 4], "miracle") == [-1, 1, 2, 3, 4]
    assert sort([], "panic") == []
    assert sort([1], "panic") == [1]
    assert sort([-1, 1, 2, 3, 4], "panic") == [-1, 1, 2, 3, 4]

    if print_OK then print("OK builtin funcs 12")

    assert path_exists(__noug_dir__)
    assert path_exists(__noug_dir__ + "/tests/test_file.noug")

    if print_OK then print("OK‚ÄØbuiltin funcs 13")

    # builtin variables
    assert __os_name__ in [\
        "Windows",\
        "Linux",\
        "Darwin",\
        "Java",\
        "OpenBSD",\
        "FreeBSD"],\
    "Please report this bug at https://jd-develop.github.io/nougaro/bugreport.html"

    if print_OK then print("OK __os_name__")

    # lists
    var list_ = [3, 4]
    assert [1, 2, *list_, 5] == [1, 2, 3, 4, 5]

    assert [1, 2, 'str'] + '3' == [1, 2, 'str', '3']
    assert append([1, 2, 'str'], 3) == [1, 2, 'str', 3]
    assert [1, 2, 'str'] * [3, 4, 'str2'] == [1, 2, 'str', 3, 4, 'str2']
    assert extend([1, 2, 'str'], [3, 4, 'str2']) == [1, 2, 'str', 3, 4, 'str2']
    assert [0]*3 == [0, 0, 0]
    assert ["a", None]*2 == ["a", None, "a", None]

    assert [1, 2, 'str'] / 0 == [1, 2, 'str'](0) == 1
    assert [1, 2, 'str'] / -1 == [1, 2, 'str'](-1) == 'str'
    assert [0, 1, 2, 3, 4](3, -4) == [3, 1]
    assert [1, 2, 'str'] - 0 == [2, 'str']
    assert [1, 2, 'str'] - -1 == [1, 2]
    assert pop([1, 2, 'str'], 0) == 1

    assert [1, 2, 3]
    assert not []

    if print_OK then print("OK lists")

    # Loops
    assert (while (assert True) == None then break) == [None]
    assert (for i in [1, 2, 3] then i) == [1, 2, 3]
    assert (for i = 0 to 9 step 2 then assert i%2 == 0) == [None]*5
    assert (for j in for i = 1 to 100 then i then if j%25 == 0 then j) == ([None]*24) * [25] * ([None]*24) * [50] * ([None]*24) * [75] * ([None]*24)
    assert (for i = 0 to -9 step -2 then assert i%2 == 0) == [None]*5
    assert (do assert True then loop while False) == [None]
    assert (do "hi" then loop while False) == ["hi"]

    if print_OK then print("OK loops 2")

    # files
    assert (read __noug_dir__ + "/tests/test_file.noug" 10) == "def test_nougaro(print_OK)\n"
    assert (write "hey" !>> __noug_dir__ + "/example_file" 2) == "hey"
    assert (read __noug_dir__ + "/example_file" 2) in ["hey\n", "hey"]
    assert (write "Hello world!" !>> __noug_dir__ + "/example_file" 2) == "Hello world!"
    assert (read __noug_dir__ + "/example_file" 2) in ["Hello world!\n", "Hello world!"]

    if print_OK then print("OK read/write")

    # libs
    import hello

    if print_OK then print("OK hello lib")

    import math
    assert math.sqrt_pi == math.sqrt(math.pi)
    assert math.sqrt_tau == math.sqrt(math.tau)
    assert math.tau == math.pi*2
    assert int(math.sqrt_pi) == math.isqrt(int(math.pi))
    assert int(math.sqrt_tau) == math.isqrt(int(math.tau))
    assert math.root(8, 3) == 2
    assert math.iroot(7.4) == math.isqrt(7)
    assert math.isqrt(26) == 5
    assert math.iroot(30, 25) == int(30 ^ (1/25))
    assert math.degrees(math.pi) == 180
    assert math.radians(180) == math.pi
    assert round(math.sin(math.pi), 5) == 0
    assert round(math.sin(math.tau/2), 5) == 0
    assert round(math.cos(math.pi), 5) == -1
    assert round(math.cos(math.tau/2), 5) == -1
    assert round(math.tan(math.pi), 5) == 0
    assert round(math.tan(2*math.pi), 5) == round(math.tan(0), 5) == round(math.tan(math.tau), 5)
    assert math.asin(0) == 0
    assert round(math.acos(-1), 9) == round(math.pi, 9) == round(math.tau/2, 9)
    assert math.abs(10) == 10
    assert math.abs(-10) == 10
    assert round(math.log(12, 2), 9) == round(math.log2(12), 9)
    assert math.e == 2.718281828459045

    if print_OK then print("OK math lib")

    import random
    assert 0 <= random.random() <= 1
    assert random.randint(1, 4) in (for i = 1 to 5 then i)  # in the list definition, 5 is excluded !
    assert random.choice(for i = 1 to 5 then i) in (for i = 1 to 5 then i)

    if print_OK then print("OK random lib")

    import statistics
    assert statistics.mean([8, 16, 15, 17, 18, 20, 25]) == 17
    var example_list = [50.3, 55.7, 57.1, 54.9, 60.1]
    assert statistics.geometric_mean(example_list) == 55.526617820569356
    assert statistics.harmonic_mean(example_list) == 55.43173136736931
    assert statistics.median(example_list) == 55.7
    assert statistics.quantiles(example_list) == [52.599999999999994, 55.7, 58.6]
    assert statistics.quantiles(example_list, 3, 'inclusive') == [55.166666666666664, 56.63333333333333]
    assert statistics.scope(example_list) == max(example_list) - min(example_list)
    var example_list += 57.1
    assert statistics.mode(example_list) == 57.1
    assert statistics.multimode("Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch") == ["l"]
    assert statistics.multimode("Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch          ") == ["l", " "]

    if print_OK then print("OK statistics lib")

    assert time.time() > 0  # don‚Äôt test after changing your computer clock before 1970-01-01 00:00:00 x)
    assert is_num(time.time())

    print("Please test 'time' module (tested when 'example()' is executed)")
    print("Please test 'lorem' module")

    # unicodedata
    import unicodedata
    assert unicodedata.name("\N{shrug}") == "SHRUG"
    assert unicodedata.name("\uEEEE", 10) == 10 != unicodedata
    assert unicodedata.lookup("latin small letter c with cedilla") == "\√ß" == "√ß" == \
        "\N{latin small letter c with cedilla}"
    assert unicodedata.category("1") == "Nd"
    assert unicodedata.category("√ß") == "Ll"
    assert unicodedata.bidirectional("\u0660") == "AN"  # Arabic Number
    assert unicodedata.combining("a") == 0
    assert unicodedata.combining("\u0334") == 1
    assert unicodedata.combining("\u302A") == 218
    assert unicodedata.east_asian_width("\u20A9") == "H"
    assert unicodedata.east_asian_width("a") == "Na"
    assert unicodedata.mirrored("(")
    assert not unicodedata.mirrored("·ªÅ")
    assert unicodedata.decomposition("√™") == "0065 0302"
    assert unicodedata.decomposition("e") == ""
    assert unicodedata.decomposition("·ªÅ") == "00EA 0300"
    assert "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ" == unicodedata.normalize("NFC", "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ")
    assert "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ" == unicodedata.normalize("NFKC", "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ")
    assert "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ" != unicodedata.normalize("NFD", "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ")
    assert "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ" != unicodedata.normalize("NFKD", "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ")
    assert unicodedata.is_normalized("NFD", unicodedata.normalize("NFKD", "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ"))
    assert not unicodedata.is_normalized("NFC", unicodedata.normalize("NFKD", "·ªÅt≈ôƒì √∏≈≠ ≈àƒô p√†≈ù √™»õrŒµ"))
    assert split(unicodedata.unicodedata_version, ".")(0) in ["14", "13", "15"]  # depends on python version

    if print_OK then print("OK unicodedata")

    # noug_version
    import noug_version
    assert noug_version.major == int(split(__noug_version__, ".")(0))
    assert noug_version.minor == int(split(__noug_version__, ".")(1))

    if print_OK then print("OK noug_version")

    print("Please also test importing in current directory (tested when using ./run_tests.sh).")

    # export ... as ...
    import debug
    assert is_func(debug.disable)
    assert debug.test_pi == 3.14

    if print_OK then print("OK export as")

    # system_call
    assert print_in_green_ret("Here it should print ‚Äúhello‚Äù (except in GH actions):") == "Here it should print ‚Äúhello‚Äù (except in GH actions):"
    system_call("echo hello")
    print_in_green("If it didn't work, please open an issue on GitHub.")
    print()

    if print_OK then print("OK system_call (or maybe, please check)")

    # variable that shadows builtin name
    var reverse = answerToTheLifeTheUniverseAndEverything
    assert reverse == 42
    if print_OK then print("OK variable that shadows builtin name")

    # metas
    import metas.legacyAbs
    import metas.nbspBetweenFrenchGuillemets
    import metas.syntax.at
    import metas.syntax.comment
    import metas.syntax.minus
    assert ¬´salut¬ª == "salut" == 'salut'
    assert ¬´¬†salut¬†¬ª == "\N{NBSP}salut\N{NBSP}"
    if print_OK then print("OK metas")

    # everything is fine in this file
    if print_OK then print("OK everything")
    print("Everything seems fine!")
    var delta_time = time.time() - start_time
    print("Ran Nougaro test file in " + str(round(delta_time, 5)) + " seconds.")
end


var _should_print_ok = cf.access_data("SHOULD_TEST_PRINT_OK", 1)
if _should_print_ok == None then var _should_print_ok = "0"
test_nougaro(int(_should_print_ok))
