# a simple Reverse Polish Notation calculator
import math
import debug

def print_help(v)  # v is verbose
    print("Welcome to the Nougaro calculator help.")
    print("This calculator uses the Reverse Polish Notation (RPN)")
    print("Find out more about RPN on https://en.wikipedia.org/wiki/Reverse_Polish_notation")
    print("RPN examples:")
    # the box-drawing characters may look bizarre with some fonts, but trust me,
    # there is the right amount of them!
    print("                   infix  │  postfix (RPN)")
    print("  ────────────────────────┼────────────────────────")
    print("                   1 + 1  │  1 1 +")
    print("                   1 ^ 3  │  1 3 ^")
    print("     (1 + 1) * (12 + 13)  │  1 1 + 12 13 + *")
    print("  sqrt(ln(2)) + 63 mod 5  │  2 ln sqrt 63 5 mod +")
    print()
    print("Here all the binary operators with their syntax:")
    print("      -number : negative number")
    print("        a b + : addition")
    print("        a b - : subtraction")
    print("        a b * : multiplication")
    print("        a b / : float division")
    print("       a b // : quotient of integer division")
    print("      a b mod : remainder of integer division")
    print("        a b ^ : power")
    print("   a base log : logarithm of base `base`")
    print()
    print("Here all the unary operators with their syntax:")
    print("     num sqrt : square root")
    print("      num cos : cosine")
    print("      num sin : sine")
    print("      num tan : tangent")
    print("     num acos : arccosine")
    print("     num asin : arcsine")
    print("     num atan : arctangent")
    print("         a ln : logarithm of base e")
    print("          a ! : factorial")
    print()
    print("Here all the constants:")
    print("           pi : 3.141592653589793")
    print("          tau : 6.283185307179586")
    print("            e : " + str(math.e))
    print()
    print("Here all the variables:")
    print("          ans : result of last operation")
    print("            i : value that gets incremented at each operation.")
    print("                Reset it with 'reseti' or 'ri' to reset it to 0.")
    print("                Print current value without incrementing with")
    print("                'printi'.")
    print("         gsto : value stored in the memory (see `sto` in the next")
    print("                section)")
    print()
    print("Here all the commands you can use inside an expression:")
    print("            p : prints the last result (useful in dc mode)")
    print("          sto : stores the last result in memory")
    print("         swap : swaps the last two values of the stack (for instance")
    print("                '1 2 swap' is treated like '2 1')")
    print("          dup : duplicates the last value of the stack (for instance")
    print("                '1 dup' is treated like '1 1')")
    print("            s : prints the full stack")
    print("           ps")
    print("   printstack")
    print("       prints")
    print("       pstack")
    print()
    print("You can exit the calculator using 'exit', 'done' or 'quit'.")
    print("You can clear the screen using 'clear' or 'cls'.")
    print("You can view the stack using 'printstack', 'prints', 'pstack', 'ps'")
    print("or 's'.")
    print("You can clear the stack using 'clearstack', 'clears', 'cstack',")
    print("'cs', 'resetstack', 'resets', 'rstack' or 'rs'.")
    print("You can print the last value using 'p'.")
    print("You can print this message using 'help'.")
    if not v then print("[DC MODE ONLY] You can print the last error message with 'h'.")
    print()
    print("CLI usage assuming the command to run the Nougaro calculator is")
    print("`nougcalc':")
    print(" nougcalc [-h] [-d|--dc-mode]")
    print()
    print("Options:")
    print("-h               show this help message and exit")
    print("-d --dc-mode     enters DC mode: a minimal, teletype-friendly mode.")
    print()
end


def print_error(error_msg, verbose)
    print_in_red(if verbose then error_msg else "?")
    if verbose then print("Stack is unchanged.")
end


if len(__args__) >= 2 and __args__(1) in ["-h", "--help"] then
    print_help(0)
    exit()
end

if len(__args__) >= 2 and __args__(1) in ["-d", "--dc-mode"] then
    var verbose = 0
else
    var verbose = 1
end

if verbose then
    print()
    print("Welcome to the Nougaro calculator!")
    print("Enter 'exit' to exit, 'cls' or 'clear' to clear the screen.")
    print("This calculator uses the Reverse Polish Notation.")
    print("Type 'help' for more info and for all the operators and constants.")
    print()
    print("Nougaro Calculator  Copyright (C) 2023-2024  Jean Dubois")
    print("This program comes with ABSOLUTELY NO WARRANTY.")
    print("This is free software, and you are welcome to redistribute it")
    print("under certain conditions.")
    print("You should have received a copy of the GNU General Public License")
    print("along with this program.  If not, see <https://www.gnu.org/licenses/>.")
    print()
end

var answer = 0
var increment = 0

var stack = []
var error_msg = ""
var storage = 0
loop:main_loop
    if verbose then
        var calcul = input("calc> ")
    else
        var calcul = input()
    end

    if calcul in ["exit", "exit()", "done", "quit", "q"] then break
    if calcul == "" then continue
    if calcul in ["clear", "cls"] then; clear(); continue; end
    if calcul in ["reseti", "ri"] then; var increment = 0; continue; end
    if calcul in ["printi"] then; print(increment); continue; end
    if calcul in ["p"] then
        # although the 'p' instruction can be used inside 'commands', having only a 'p' as the input should not
        # increase the 'i' value
        if len(stack) == 0 then print(0) \
        else print(stack(-1))
        continue
    end
    if calcul in ["rics", "csri", "rsi", "ris"] then
        var increment = 0
        var stack = []
        if verbose then print("Stack cleared and i set to 0.")
        continue
    end
    if calcul in ["resetstack", "rstack", "resets", "rs", "clearstack", "cstack", "clears", "cs"] then
        var stack = []
        if verbose then print("Stack cleared.")
        continue
    end
    if calcul in ["printstack", "pstack", "prints", "ps", "s"] then; print(stack); continue; end
    if calcul in ["psi", "pis", "spi"] then; print(stack); print(increment); continue; end
    if calcul in ["help"] then
        print_help(verbose)
        continue
    end
    if calcul == "h" then
        print_in_red(error_msg)
        continue
    end

    # tokenize
    var tokens = []
    var floating_point = 0
    for char in calcul then
        var old_floating_point = floating_point
        var current_tok = char
        if char in "0123456789" then
            if len(tokens) != 0 and not is_num(tokens(-1)) then
                if tokens(-1) == "-" then
                    pop(tokens, -1)
                    append(tokens, -int(char))
                elif tokens(-1) == '.' then
                    pop(tokens, -1)
                    if len(tokens) == 0 then append(tokens, 0)
                    if tokens(-1) == "[space]" then append(tokens, 0)
                    var floating_point += 1
                    if tokens(-1) >= 0 then
                        replace(tokens, -1, float(tokens(-1)) + float(char)/10)
                    else
                        replace(tokens, -1, float(tokens(-1)) - float(char)/10)
                    end
                else
                    append(tokens, int(char))
                end
            elif len(tokens) != 0 then  # last token is num
                if tokens(-1) >= 0 then
                    if is_int(tokens(-1)) then
                        replace(tokens, -1, tokens(-1)*10 + int(char))
                    else  # float
                        var floating_point += 1
                        replace(\
                            tokens, -1,\
                            round(\
                                tokens(-1) + float(char)/round(10 ^ floating_point),\
                                floating_point\
                            )\
                        )
                    end
                else
                    if is_int(tokens(-1)) then
                        replace(tokens, -1, tokens(-1)*10 - int(char))
                    else  # float
                        var floating_point += 1
                        replace(
                            tokens, -1,
                            round(
                                tokens(-1) - float(char)/(10 ^ floating_point),
                                floating_point\
                            )
                        )
                    end
                end
            else
                append(tokens, int(char))
            end
        elif char == '.' then
            if floating_point != 0 then
                var error_msg = "Error: a number can’t have more than two dots"
                print_error(error_msg, verbose)
                continue:main_loop
            end
            append(tokens, '.')
        elif char == " " or char == chr(8239) or char == chr(160) then  # the 2 others are NNBSP and NBSP
            append(tokens, "[space]")
        elif char in "+-*/^!" then
            append(tokens, char)
        elif char in "abcdefghijklmnopqrstuvwxyz" then
            if len(tokens) > 0 and all(for char in tokens(-1) then char in "abcdefghijklmnopqrstuvwxyz") then
                replace(tokens, -1, tokens(-1)+char)
            else
                append(tokens, char)
            end
        elif char == "\t" then
            print_error("Error: use spaces instead of tabulations.", verbose)
            continue:main_loop
            break
        else
            var error_msg = "Error: illegal char: " + char
            print_error(error_msg, verbose)
            continue:main_loop
        end
        if old_floating_point == floating_point then var floating_point = var old_floating_point = 0
    end

    if debug.is_debug_enabled then \
        print(tokens)

    # parse
    var i = -1
    var last_token = ""
    var old_stack = list(stack)
    for token in tokens then
        var i += 1
        if last_token == "/" and token == "/" then continue
        if is_num(token) then
            append(stack, token)
        elif token == "sqrt" and len(stack) > 0 and is_num(stack(-1)) then
            if stack(-1) >= 0 then
                replace(stack, -1, math.sqrt(stack(-1)))
            else
                var error_msg = "Error: a negative number (" + str(stack(-1)) + ") doesn't have a square root (this calculator does not support complex numbers)."
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
        elif token == "cos" and len(stack) > 0 and is_num(stack(-1)) then
            replace(stack, -1, math.cos(stack(-1)))
        elif token == "sin" and len(stack) > 0 and is_num(stack(-1)) then
            replace(stack, -1, math.sin(stack(-1)))
        elif token == "tan" and len(stack) > 0 and is_num(stack(-1)) then
            # no need to check for illegal value – I challenge you to make
            # tangent crash with floating-point values…
            replace(stack, -1, math.tan(stack(-1)))
        elif token == "acos" and len(stack) > 0 and is_num(stack(-1)) then
            if -1 <= stack(-1) <= 1 then
                replace(stack, -1, math.acos(stack(-1)))
            else
                var error_msg = "Error: " + str(stack(-1)) + " is out of bounds for arccosine."
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
        elif token == "asin" and len(stack) > 0 and is_num(stack(-1)) then
            if -1 <= stack(-1) <= 1 then
                replace(stack, -1, math.asin(stack(-1)))
            else
                var error_msg = "Error: " + str(stack(-1)) + " is out of bounds for arcsine."
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
        elif token == "atan" and len(stack) > 0 and is_num(stack(-1)) then
            replace(stack, -1, math.atan(stack(-1)))
        elif token == "p" then
            if len(stack) == 0 then print(0) \
            else print(stack(-1))
        elif token in ["printstack", "pstack", "prints", "ps", "s"] then
            print(stack)
        elif token == "pi" then
            append(stack, math.pi)
        elif token == "tau" then
            append(stack, math.tau)
        elif token == "ans" then
            append(stack, answer)
        elif token == "mod" and len(stack) > 1 and is_num(stack(-1)) and is_num(stack(-2)) then
            var num1 = stack(-2)
            var num2 = stack(-1)
            if num2 == 0 then
                var error_msg = "Error: can not divide by 0"
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
            var mod = num1 % num2
            pop(stack, -1)
            pop(stack, -1)
            append(stack, mod)
        elif token == "log" and len(stack) > 1 and is_num(stack(-1)) and is_num(stack(-2)) then
            var number = stack(-2)
            var base = stack(-1)
            if number <= 0 or base <= 0 or base == 1 then
                var error_msg = "Error: math domain error with logarithm"
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
            var logbase = math.log(number, base)
            pop(stack, -1)
            pop(stack, -1)
            append(stack, logbase)
        elif token == "ln" and len(stack) > 0 and is_num(stack(-1)) then
            var number = stack(-1)
            if number <= 0 then
                var error_msg = "Error: math domain error with logarithm"
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
            var natural_log = math.log(number)
            pop(stack, -1)
            append(stack, natural_log)
        elif token == "!" and len(stack) > 0 and is_int(stack(-1)) then
            var number = stack(-1)
            if number < 0 then
                var error_msg = "Error: math error with factorial (n<0)"
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
            if number >= 9223372036854775808 then
                var error_msg = "Error: overflow with factorial (n>=9223372036854775808)"
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
            pop(stack, -1)
            append(stack, math.factorial(number))
        elif token == "[space]" then
            void()
        elif token == "i" then
            append(stack, increment)
        elif token == "e" then
            append(stack, math.e)
        elif token == "sto" then
            if len(stack) > 0 then
                var storage = stack(-1)
            else
                var storage = 0
            end
        elif token == "gsto" then
            append(stack, storage)
        elif token == "dup" then
            if len(stack) == 0 then
                var error_msg = "Error: stack underflow"
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
            append(stack, stack(-1))
        elif token == "swap" then
            if len(stack) < 2 then
                var error_msg = "Error: stack underflow"
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
            var last = pop(stack)
            var last_last = pop(stack)
            append(stack, last)
            append(stack, last_last)
        else
            if len(stack) >= 2 then
                if token == "+" then
                    var result = stack(-2) + stack(-1)
                elif token == "-" then
                    var result = stack(-2) - stack(-1)
                elif token == '/' then
                    if len(stack) != 0 and stack(-1) == 0 then
                        var error_msg = "Error: can not divide by 0"
                        print_error(error_msg, verbose)
                        var stack = list(old_stack)
                        continue:main_loop
                    end
                    if len(tokens) >= i+2 and tokens(i+1) == "/" then
                        var result = stack(-2) // stack(-1)
                    else
                        var result = stack(-2) / stack(-1)
                    end
                elif token == "*" then
                    var result = stack(-2) * stack(-1)
                elif token == "^" then
                    var result = stack(-2) ^ stack(-1)
                else
                    var error_msg = "Error: invalid token: " + str(token)
                    print_error(error_msg, verbose)
                    var stack = list(old_stack)
                    continue:main_loop
                end
                pop(stack, -1)
                pop(stack, -1)
                append(stack, result)
            else
                var error_msg = "Error: maybe there is not enough values in stack, or maybe you just typed the beginning of a command."
                print_error(error_msg, verbose)
                var stack = list(old_stack)
                continue:main_loop
            end
        end
        var last_token = token
    end

    if len(stack) >= 1 then
        if verbose then print(stack(-1))
        var answer = stack(-1)
        var increment += 1
    end
end
